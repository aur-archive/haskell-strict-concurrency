Index: archhaskell-habs/haskell-strict-concurrency/src/strict-concurrency-0.2.4.1/Control/Concurrent/MVar/Strict.hs
===================================================================
--- archhaskell-habs.orig/haskell-strict-concurrency/src/strict-concurrency-0.2.4.1/Control/Concurrent/MVar/Strict.hs
+++ archhaskell-habs/haskell-strict-concurrency/src/strict-concurrency-0.2.4.1/Control/Concurrent/MVar/Strict.hs
@@ -4,7 +4,7 @@
 -- Module      :  Control.Concurrent.MVar.Strict
 -- Copyright   :  (c) The University of Glasgow 2001
 -- License     :  BSD-style (see the file libraries/base/LICENSE)
--- 
+--
 -- Maintainer  :  libraries@haskell.org
 -- Stability   :  experimental
 -- Portability :  non-portable (concurrency)
@@ -36,14 +36,14 @@ module Control.Concurrent.MVar.Strict
         , addMVarFinalizer -- :: MVar a -> IO () -> IO ()
     ) where
 
-import Control.Concurrent.MVar ( MVar, newEmptyMVar, takeMVar, 
+import Control.Concurrent.MVar ( MVar, newEmptyMVar, takeMVar,
                   tryTakeMVar, isEmptyMVar, addMVarFinalizer
                 )
 import GHC.Exts
 import GHC.IOBase
 
 import Prelude
-import Control.OldException as Exception
+import Control.Exception as Exception
 -- import Control.Parallel.Strategies
 import Control.DeepSeq
 
@@ -122,12 +122,12 @@ withMVar :: NFData a => MVar a -> (a ->
 withMVar m io = block $ do
     a <- takeMVar m
     b <- Exception.catch (unblock (io a))
-            (\e -> do putMVar m a; throw e)
+            ((\e -> do putMVar m a; throw e) :: (SomeException -> IO b))
     putMVar m a
     return b
 
 {-|
-  A safe wrapper for modifying the contents of an 'MVar'.  Like 'withMVar', 
+  A safe wrapper for modifying the contents of an 'MVar'.  Like 'withMVar',
   'modifyMVar' will replace the original contents of the 'MVar' if an
   exception is raised during the operation.
 -}
@@ -136,7 +136,7 @@ modifyMVar_ :: NFData a => MVar a -> (a
 modifyMVar_ m io = block $ do
     a  <- takeMVar m
     a' <- Exception.catch (unblock (io a))
-            (\e -> do putMVar m a; throw e)
+            ((\e -> do putMVar m a; throw e) :: (SomeException -> IO b))
     putMVar m a'
 
 {-|
@@ -148,7 +148,7 @@ modifyMVar :: NFData a => MVar a -> (a -
 modifyMVar m io = block $ do
     a      <- takeMVar m
     (a',b) <- Exception.catch (unblock (io a))
-                (\e -> do putMVar m a; throw e)
+                ((\e -> do putMVar m a; throw e) :: (SomeException -> IO b))
     putMVar m a'
     return b
 
